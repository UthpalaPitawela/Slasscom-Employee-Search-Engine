type Member @aws_cognito_user_pools {
  id: ID!
  nic: String
  name: String
  personalEmail: String
  designation: String
  currentWorkplace: String
  specialization: String
  professionalInstitutes: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMemberConnection @aws_cognito_user_pools {
  items: [Member]!
  nextToken: String
}

input ModelMemberFilterInput {
  id: ModelIDInput
  nic: ModelStringInput
  name: ModelStringInput
  personalEmail: ModelStringInput
  designation: ModelStringInput
  currentWorkplace: ModelStringInput
  specialization: ModelStringInput
  professionalInstitutes: ModelStringInput
  and: [ModelMemberFilterInput]
  or: [ModelMemberFilterInput]
  not: ModelMemberFilterInput
}

type Query {
  getMember(id: ID!): Member @aws_cognito_user_pools
  listMembers(filter: ModelMemberFilterInput, limit: Int, nextToken: String): ModelMemberConnection @aws_cognito_user_pools
}

input ModelMemberConditionInput {
  nic: ModelStringInput
  name: ModelStringInput
  personalEmail: ModelStringInput
  designation: ModelStringInput
  currentWorkplace: ModelStringInput
  specialization: ModelStringInput
  professionalInstitutes: ModelStringInput
  and: [ModelMemberConditionInput]
  or: [ModelMemberConditionInput]
  not: ModelMemberConditionInput
}

input CreateMemberInput {
  id: ID
  nic: String
  name: String
  personalEmail: String
  designation: String
  currentWorkplace: String
  specialization: String
  professionalInstitutes: String
}

input UpdateMemberInput {
  id: ID!
  nic: String
  name: String
  personalEmail: String
  designation: String
  currentWorkplace: String
  specialization: String
  professionalInstitutes: String
}

input DeleteMemberInput {
  id: ID!
}

type Mutation {
  createMember(input: CreateMemberInput!, condition: ModelMemberConditionInput): Member @aws_cognito_user_pools
  updateMember(input: UpdateMemberInput!, condition: ModelMemberConditionInput): Member @aws_cognito_user_pools
  deleteMember(input: DeleteMemberInput!, condition: ModelMemberConditionInput): Member @aws_cognito_user_pools
}

input ModelSubscriptionMemberFilterInput {
  id: ModelSubscriptionIDInput
  nic: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  personalEmail: ModelSubscriptionStringInput
  designation: ModelSubscriptionStringInput
  currentWorkplace: ModelSubscriptionStringInput
  specialization: ModelSubscriptionStringInput
  professionalInstitutes: ModelSubscriptionStringInput
  and: [ModelSubscriptionMemberFilterInput]
  or: [ModelSubscriptionMemberFilterInput]
}

type Subscription {
  onCreateMember(filter: ModelSubscriptionMemberFilterInput): Member @aws_subscribe(mutations: ["createMember"]) @aws_cognito_user_pools
  onUpdateMember(filter: ModelSubscriptionMemberFilterInput): Member @aws_subscribe(mutations: ["updateMember"]) @aws_cognito_user_pools
  onDeleteMember(filter: ModelSubscriptionMemberFilterInput): Member @aws_subscribe(mutations: ["deleteMember"]) @aws_cognito_user_pools
}
